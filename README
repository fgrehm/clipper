Wheels O/RM

License:
+ Free for non-commercial use
+ Commercial license available for a fee
+ May not redistribute derivative works
+ May modify for personal use only

  : The strictest CreativeCommons license satisfies most of this, except for the ban against modification even for personal use.
    http://creativecommons.org/licenses/by-nc-nd/3.0/us/
    Also, the CC licenses are not intended for Software.
    
  : MySQL uses a Dual License, GPL or Commercial. The issue with this is that contributions to the GPL base cannot be licensed commercially.
    Which means that they can accept descriptions of issues or features, but not code since they couldn't accept patches from the community under
    the GPL license and then integrate that into the commercial version. So you either don't accept patches, or you maintain forks for the
    community vs. commercial versions.
    
    Further, you cannot impose a non-commercial-use-only clause with the GPL version. So your license offerings aren't a choice between
    non-commercial vs. commercial usage. It's a choice between 100% GPL deployment and the commercial-linking-restriction-free licensing.
    
    So because we're running MySQL on Redhat, and not linking to MySQL libs in any way during the process of running a Rails application at work,
    we're 100% GPL compatible on our MySQL installations, therefore don't need to purchase the commercial license despite using the platform
    for commercial uses. The real carrot for MySQL AB then is the support the commercial license provides. I'm not sure if this is a strong
    enough incentive to license commercially for a new product with a much smaller user base and still generate any meaningful income through
    commercial licensing.
    
  : The Jetbrain's licenses look promising:
    http://www.jetbrains.com/idea/opensource/license.html#openSource_licenseTerms
    http://www.jetbrains.com/idea/buy/license-matrix.jsp
    
1.0 Roadmap:
* Constraints
* Relationships
* Finders

1.1 Roadmap:
* Java port of internals
* Batch updates
* Connection Pooling

TODO:

* IdentityMap
* Repository Session
* Repository Session connection helper method
* Object Mappings
* Repository interface
* ObjectEnumerator
* Load an object
* Save an object
* Repository::Types should load and store Orm::Types
* Load a complex object that spans more than one table
* Load an object that uses a Discriminator
* Save a Collection
* Load a Collection
* Load a Collection with filters
* Save an Association
* Load an Association
* Load an Association with filters
* Load a Collection with complex filters

TODONE:

* Schema Mappings: Field, Source and Relation mappings are all tested and in-place. Sam:2009-01-11
* Uri: Sam:2009-01-11
* Repository (only class definition, no interface): Sam:2009-01-12
* Repository registration: Sam:2009-01-12